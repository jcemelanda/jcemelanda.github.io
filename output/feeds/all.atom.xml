<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Julio Cesar Eiras Melanda</title><link href="https://jcemelanda.github.io/" rel="alternate"></link><link href="https://jcemelanda.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jcemelanda.github.io/</id><updated>2021-08-12T00:00:00+02:00</updated><entry><title>Python Code Blocks</title><link href="https://jcemelanda.github.io/python-code-blocks.html" rel="alternate"></link><published>2021-08-12T00:00:00+02:00</published><updated>2021-08-12T00:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-08-12:/python-code-blocks.html</id><summary type="html">&lt;p&gt;Hi, let&amp;#8217;s talk a bit aboutcode blocks in Python as it&amp;#8217;s one of the main characteristics of the&amp;nbsp;language.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;Continuing the Python series, let&amp;#8217;s talk about code&amp;nbsp;blocks.&lt;/p&gt;
&lt;p&gt;For those who missed the first post, here&amp;#8217;s a link:
&lt;a href="python-basics.html"&gt;Python&amp;nbsp;Basics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the Python shell, we have two&amp;nbsp;cursors.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first one we&amp;#8217;ve already seen in the previous post, and it&amp;#8217;s where you type Python commands in. The second is a code block indicator. There you insert commands that will be inside a code&amp;nbsp;block.&lt;/p&gt;
&lt;p&gt;For example, when we do an if, conditional structure that will be explained in more detail in a next post, we can have the following in the&amp;nbsp;shell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x is less than 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the explanation&amp;nbsp;=]&lt;/p&gt;
&lt;p&gt;In the first line, we say that the variable x contains the value 0;
Next, we compare the value contained in x with 1. When we finish a command with : the interpreter understands that this is a command that did not end at the end of that line, and that it is composed of more commands, so the secondary cursor &lt;code&gt;.. .&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, many programmers used to other languages ​​must ask themselves where the curly braces are to determine the where the block starts and&amp;nbsp;ends.&lt;/p&gt;
&lt;p&gt;In Python, blocks are determined by&amp;nbsp;indentation.&lt;/p&gt;
&lt;p&gt;The lines that are inside the if, that is what should be executed if the comparison is true, must be&amp;nbsp;indented.&lt;/p&gt;
&lt;p&gt;It is generally a convention in Python that we use 4 spaces for&amp;nbsp;indentation.&lt;/p&gt;
&lt;p&gt;Returning to the subject, print(&amp;#8220;x is less than 1&amp;#8221;) is the command that should be executed if the comparison x &amp;lt; 1 is true. So, this line is indented, and the interpreter knows that it should only execute it if x is less than&amp;nbsp;1.&lt;/p&gt;
&lt;p&gt;When you give an enter at the end of this line, the interpreter shows you the secondary cursor again, because an if can have several commands inside it. As we&amp;#8217;ll see later, the execution of an entire program can be inside an&amp;nbsp;if.&lt;/p&gt;
&lt;p&gt;Thus, only after a second enter does the interpreter execute the command and display the&amp;nbsp;result.&lt;/p&gt;
&lt;p&gt;So, to&amp;nbsp;recap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python blocks are defined by&amp;nbsp;indentation&lt;/li&gt;
&lt;li&gt;Indentation must follow a pattern, preferably in all&amp;nbsp;programs&lt;/li&gt;
&lt;li&gt;In the shell, indented blocks are preceded by secondary&amp;nbsp;courses&amp;#8230;&lt;/li&gt;
&lt;li&gt;A block indicates a piece of code that is inside another&amp;nbsp;command&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a python script like the parrot we wrote in the previous post, we did the same&amp;nbsp;basically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Welcome to the parrot app. It will repeat everything you type below&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The parrot says&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;You should type something before you hit ENTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can put this code in a &lt;code&gt;.py&lt;/code&gt; file and test&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I hope you liked the content. Again, feel free to leave any comments or questions&amp;nbsp;:D&lt;/p&gt;</content><category term="Python"></category><category term="start"></category><category term="basics"></category><category term="code block"></category></entry><entry><title>Blocos de Código em Python</title><link href="https://jcemelanda.github.io/python-code-blocks-pt_BR.html" rel="alternate"></link><published>2021-08-12T00:00:00+02:00</published><updated>2021-08-12T00:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-08-12:/python-code-blocks-pt_BR.html</id><summary type="html">&lt;p&gt;Olá, vamos falar sobre blocos de código em Python, pois esta é uma das características mais importantes desta&amp;nbsp;linguagem.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Olá!&lt;/p&gt;
&lt;p&gt;Continuando a série inicial sobre a Python, vamos falar sobre blocos de&amp;nbsp;código.&lt;/p&gt;
&lt;p&gt;Pra quem perdeu o primeiro post, aqui vai um link:
&lt;a href="python-basics-pt_BR.html"&gt;Noções Básicas de&amp;nbsp;Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;No shell Python, temos dois&amp;nbsp;cursores&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;O primeiro já vimos no post anterior, e é onde você insere os comandos do Python. Já o segundo é um indicador de bloco de código. Ali você insere comandos que estarão dentro de um bloco de&amp;nbsp;código.&lt;/p&gt;
&lt;p&gt;Por exemplo, ao fazermos um if, estrutura condicional que será explicada em mais detalhes num próximo post, temos o seguinte no&amp;nbsp;shell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x é menor que 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;é&lt;/span&gt; &lt;span class="n"&gt;menor&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Agora, a explicação&amp;nbsp;=]&lt;/p&gt;
&lt;p&gt;Na primeira linha, dizemos que a variável x contém o valor 0;
Em seguida, comparamos o valor contido em x com 1. Ao terminarmos um comando com : o interpretador entende que este é um comando que não acabou no final daquela linha, e que é composto por mais comandos, então surge o cursor secundário &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Então, muitos programadores habituados com outras linguagens devem se perguntar onde estão as chaves pra determinar o&amp;nbsp;bloco.&lt;/p&gt;
&lt;p&gt;No Python, os blocos são determinaods pela identação (ou edentação, ou endentação&amp;#8230; já vi várias formas da&amp;nbsp;palavra).&lt;/p&gt;
&lt;p&gt;As linhas que estão dentro do if, ou seja o que deve ser executado caso a comparação seja verdadeira deve estar&amp;nbsp;identado.&lt;/p&gt;
&lt;p&gt;Em geral é uma convenção no Python usarmos 4 espaços para a&amp;nbsp;identação.&lt;/p&gt;
&lt;p&gt;Voltando ao assunto, o print(&amp;#8220;x é menor que 1&amp;#8221;) é o comando que deve ser executado se a comparação x &amp;lt; 1 for verdadeira. Assim, esta linha está identada, e o interpretador sabe que só deve executá-la caso x seja menor que&amp;nbsp;1.&lt;/p&gt;
&lt;p&gt;Quando você dá um enter no final desta linha, o interpretador te mostra novamente o cursor secundário, pois um if pode ter vários comandos ali dentro. Como veremos mais adiante, a execução de um programa todo pode estar dentro de um&amp;nbsp;if.&lt;/p&gt;
&lt;p&gt;Assim, só depois de um segundo enter é que o interpretador executa o comando e mostra o&amp;nbsp;resultado.&lt;/p&gt;
&lt;p&gt;Então,&amp;nbsp;recapitulando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blocos em Python são definidos pela&amp;nbsp;identação&lt;/li&gt;
&lt;li&gt;A identação deve seguir um padrão, preferencialmente em todos os&amp;nbsp;programas&lt;/li&gt;
&lt;li&gt;No shell, blocos identados são precedidos do cursos secundário&amp;nbsp;&amp;#8230;&lt;/li&gt;
&lt;li&gt;Um bloco indica um trecho de código que está dentro de outro&amp;nbsp;comando&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Num script python como o papagaio que escrevemos no post anterior, fszemos da mesma forma&amp;nbsp;basicamente. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bem vindo ao aplicativo papagaio. Ele vai repetir tudo que você digitar abaixo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;texto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;O papagaio diz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;texto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Você deveria digitar algo antes do ENTER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Você pode colocar este código em um arquivo &lt;code&gt;.py&lt;/code&gt; e&amp;nbsp;testá-lo.&lt;/p&gt;
&lt;p&gt;Espero que tenha gostado do conteúdo. Mais uma vez, fique à vontade para deixar comentários ou perguntas:&amp;nbsp;D&lt;/p&gt;</content><category term="Python"></category><category term="start"></category><category term="basics"></category><category term="code block"></category></entry><entry><title>Python Basics</title><link href="https://jcemelanda.github.io/python-basics.html" rel="alternate"></link><published>2021-08-10T00:00:00+02:00</published><updated>2021-08-10T00:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-08-10:/python-basics.html</id><summary type="html">&lt;p&gt;Hello, this is a quick introduction to Python programing&amp;nbsp;language.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I think it could be a good thing to start with a set of posts teaching the very basics of&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;I won&amp;#8217;t teach you to install it because it&amp;#8217;s quite straightforward and if will be a different process for each operating system. So, just click here to find out how to &lt;a href="https://wiki.python.org/moin/BeginnersGuide/Download"&gt;install python to your system&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After having it installed, you&amp;#8217;re going to need a nice code editor to use while learning. I recommend &lt;a href="https://code.visualstudio.com/download"&gt;VSCode&lt;/a&gt;. If you&amp;#8217;re already used to another code/text editor, feel free to use it&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;Open the terminal in your editor and run &lt;code&gt;python&lt;/code&gt;. That should be enough to get you to the interactive shell of python if the binaries are correctly installed/referenced in the&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;You should see something that looks like&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.9.6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;11.1.1&lt;/span&gt; &lt;span class="mi"&gt;20210531&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;11.1.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; are the cursor where you can enter new&amp;nbsp;commands.&lt;/p&gt;
&lt;h2&gt;Hello&amp;nbsp;World&lt;/h2&gt;
&lt;p&gt;As every noteworthy beginner&amp;#8217;s guide we should start with the most loved and well known &lt;code&gt;Hello World&lt;/code&gt; example.&lt;/p&gt;
&lt;p&gt;In your python shell&amp;nbsp;type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And hit enter. In the python shell it should look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, from now on, when the code is expected to be typed in the &lt;code&gt;Python Shell&lt;/code&gt; we&amp;#8217;ll use the cursors to help you identifying it, as in the example&amp;nbsp;above.&lt;/p&gt;
&lt;h2&gt;Getting&amp;nbsp;Input&lt;/h2&gt;
&lt;p&gt;The same way you can print data to the screen, you can ask for data from the user. Usually this data would be stored in a variable, which in python is dynamically created, so, no declaration&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s make a small scrip that asks for your age and prints it back to the&amp;nbsp;screen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Type your age here =&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here you can type your age and hit &lt;code&gt;enter&lt;/code&gt;, that will be read as a text, and then you can print it to the&amp;nbsp;console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Type your age here =&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your age is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Running a Python&amp;nbsp;Script&lt;/h2&gt;
&lt;p&gt;Now that we know how to get data from the user and print it in the screen we can already create a simple script based in our small&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;In your editor, create a new file called &lt;code&gt;parrot.py&lt;/code&gt;. We&amp;#8217;ll first greet the user with a &lt;code&gt;print&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Welcome to parrot app. It will repeat whatever you type below&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we&amp;#8217;ll get the input into a variable that we&amp;#8217;ll call &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally we print the text back to the&amp;nbsp;screen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The parrot says&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the full content you should have in your&amp;nbsp;file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Welcome to parrot app. It will repeat whatever you type below&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The parrot says&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, in the terminal, exit the &lt;code&gt;python shell&lt;/code&gt; with &lt;code&gt;exit(0)&lt;/code&gt; or &lt;code&gt;CTRL+D&lt;/code&gt;. In the regular terminal now you should&amp;nbsp;run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python parrot.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should ask for some text, and after you type and hit enter it should print it back to you. Something like&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python parrot.py
Welcome to parrot app. It will repeat whatever you &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;below&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Hello World!
The parrot says Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And those were your first steps into Python. I hope you enjoyed this small tutorial and soon I&amp;#8217;ll continue with this series teaching more python&amp;nbsp;basics.&lt;/p&gt;
&lt;p&gt;Please let me know in the comments what you think and what else you would like to see in this blog&amp;nbsp;:D&lt;/p&gt;
&lt;p&gt;See&amp;nbsp;ya!&lt;/p&gt;</content><category term="Python"></category><category term="start"></category><category term="basics"></category></entry><entry><title>Noções básicas de Python</title><link href="https://jcemelanda.github.io/python-basics-pt_BR.html" rel="alternate"></link><published>2021-08-10T00:00:00+02:00</published><updated>2021-08-10T00:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-08-10:/python-basics-pt_BR.html</id><summary type="html">&lt;p&gt;Olá, esta é uma introdução rápida à linguagem de programação&amp;nbsp;Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Olá!&lt;/p&gt;
&lt;p&gt;Acho que poderia ser bom começar com uma série de postagens ensinando o básico do&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;Não vou ensiná-lo a instalá-lo porque é bastante simples e será um processo diferente para cada sistema operacional. Portanto, clique aqui para descobrir como &lt;a href="https://wiki.python.org/moin/BeginnersGuide/Download"&gt;instalar o python em seu sistema&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Depois de instalá-lo, você precisará de um bom editor de código para usar enquanto aprende. Eu recomendo &lt;a href="https://code.visualstudio.com/download"&gt;VSCode&lt;/a&gt;. Se você já estiver acostumado com outro editor de código/texto, sinta-se à vontade para&amp;nbsp;usá-lo.&lt;/p&gt;
&lt;p&gt;Abra o terminal em seu editor e execute &lt;code&gt;python&lt;/code&gt;. Isso deve ser o suficiente para levá-lo ao shell interativo do python se os binários estiverem instalados/referenciados corretamente no&amp;nbsp;sistema.&lt;/p&gt;
&lt;p&gt;Você deve ver algo parecido com&amp;nbsp;isto&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.9.6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;11.1.1&lt;/span&gt; &lt;span class="mi"&gt;20210531&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;11.1.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Observe que &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; são o cursor onde você pode inserir novos&amp;nbsp;comandos.&lt;/p&gt;
&lt;h2&gt;Olá,&amp;nbsp;Mundo&lt;/h2&gt;
&lt;p&gt;Como todo guia para iniciantes notável, devemos começar com o exemplo mais amado e conhecido do &lt;code&gt;Olá, Mundo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Em seu shell python&amp;nbsp;digite&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Olá, Mundo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E aperte enter. No shell do python, deve mostrar algo&amp;nbsp;assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Olá, Mundo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Olá&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mundo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Portanto, a partir de agora, quando se espera que o código seja digitado no &lt;code&gt;Python Shell&lt;/code&gt; usaremos os cursores para ajudá-lo a identificá-lo, como no exemplo&amp;nbsp;acima.&lt;/p&gt;
&lt;h2&gt;Obtendo&amp;nbsp;informações&lt;/h2&gt;
&lt;p&gt;Da mesma forma que você pode mostrar dados na tela, você pode solicitar dados ao usuário. Normalmente, esses dados são armazenados em uma variável, que em python é criada dinamicamente, portanto, nenhuma declaração é&amp;nbsp;necessária.&lt;/p&gt;
&lt;p&gt;Vamos fazer um pequeno script que pergunta sua idade e imprime de volta na&amp;nbsp;tela.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Digite sua idade aqui =&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Digite&lt;/span&gt; &lt;span class="n"&gt;sua&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="n"&gt;aqui&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aqui você pode digitar sua idade e clicar em &lt;code&gt;enter&lt;/code&gt;, que será lido como um texto, e então você pode imprimi-lo no&amp;nbsp;console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Digite sua idade aqui =&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Digite&lt;/span&gt; &lt;span class="n"&gt;sua&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="n"&gt;aqui&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sua idade é&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Sua&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="n"&gt;é&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Executando um script&amp;nbsp;Python&lt;/h2&gt;
&lt;p&gt;Agora que sabemos como pegar os dados do usuário e imprimi-los na tela, já podemos criar um script simples baseado em nosso pequeno&amp;nbsp;código.&lt;/p&gt;
&lt;p&gt;Em seu editor, crie um novo arquivo chamado &lt;code&gt;papagaio.py&lt;/code&gt;. Primeiro, saudaremos o usuário com uma instrução &lt;code&gt;print&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bem vindo ao aplicativo papagaio. Ele vai repetir tudo que você digitar abaixo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Agora vamos obter a entrada em uma variável que chamaremos de &lt;code&gt;texto&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finalmente, imprimimos o texto de volta na&amp;nbsp;tela.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;O papagaio diz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;texto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este é o conteúdo completo que você deve ter em seu&amp;nbsp;arquivo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bem vindo ao aplicativo papagaio. Ele vai repetir tudo que você digitar abaixo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;O papagaio diz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;texto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Agora, no terminal, saia do &lt;code&gt;python shell&lt;/code&gt; com&lt;code&gt;exit (0)&lt;/code&gt;ou&lt;code&gt;CTRL + D&lt;/code&gt;. No terminal regular agora você deve&amp;nbsp;executar&lt;/p&gt;
&lt;p&gt;&lt;code&gt;`shellscript
python papagaio.py&lt;/code&gt; `&lt;/p&gt;
&lt;p&gt;Isso deve pedir algum texto, e depois que você digitar e clicar em Enter, ele deverá imprimi-lo de volta para você. Algo&amp;nbsp;assim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python papagaio.py
Bem vindo ao aplicativo papagaio. Ele vai repetir tudo que você digitar &lt;span class="nv"&gt;abaixo&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Olá, Mundo!
O papagaio diz Olá, Mundo!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E esses foram seus primeiros passos em Python. Espero que tenham gostado deste pequeno tutorial e em breve continuarei com esta série ensinando mais noções básicas de&amp;nbsp;python.&lt;/p&gt;
&lt;p&gt;Deixe-me saber nos comentários o que você pensa e o que mais gostaria de ver neste blog:&amp;nbsp;D&lt;/p&gt;
&lt;p&gt;Até&amp;nbsp;mais!&lt;/p&gt;</content><category term="Python"></category><category term="start"></category><category term="basics"></category></entry><entry><title>Python, my favorite programming language</title><link href="https://jcemelanda.github.io/python-favorite.html" rel="alternate"></link><published>2021-07-31T06:00:00+02:00</published><updated>2021-07-31T06:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-07-31:/python-favorite.html</id><summary type="html">&lt;p&gt;A few ideas and thoughts on why Python is my favorite&amp;nbsp;language&lt;/p&gt;</summary><content type="html">&lt;p&gt;Probably anyone that knows me knows I like Python, it&amp;#8217;s not really something new, as I have thousands of t-shirts from Python events I&amp;#8217;ve been all over Brazil from 2015 to&amp;nbsp;2019.&lt;/p&gt;
&lt;p&gt;So, I decided to try to put in words why I like it so much and it&amp;#8217;s so important in my life and my&amp;nbsp;career.&lt;/p&gt;
&lt;h3&gt;Simplicity&lt;/h3&gt;
&lt;p&gt;I think one of the first things that come to someone&amp;#8217;s mind when they think of Python is how simple it is. Python syntax is so straightforward that many times reading the code feels like reading&amp;nbsp;English.&lt;/p&gt;
&lt;p&gt;Take this for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s just&amp;nbsp;beautiful.&lt;/p&gt;
&lt;h3&gt;Rich options of 3rd party&amp;nbsp;libraries&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s common to see jokes that in python you can do whatever you want by just importing a&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s surely not as easy, but definitely you have a huge number of libraries that already do or helps you doing almost everything you want&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;Some of the most amazing libraries I have used&amp;nbsp;are:&lt;/p&gt;
&lt;h4&gt;requests&lt;/h4&gt;
&lt;p&gt;A library that makes it super easy and readable to call URLs using regular &lt;span class="caps"&gt;HTTP&lt;/span&gt; verbs like &lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;POST&lt;/span&gt;, &lt;span class="caps"&gt;PUT&lt;/span&gt;, &lt;span class="caps"&gt;PATCH&lt;/span&gt; and &lt;span class="caps"&gt;DELETE&lt;/span&gt;. Here are some ecamples of how to call&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;django&lt;/h4&gt;
&lt;p&gt;Django is a full featured web framework that allows you to create web applications with an inspiration in the &lt;span class="caps"&gt;MVC&lt;/span&gt; (Model-View-Controller) application architecture, (&lt;span class="caps"&gt;MVT&lt;/span&gt; in Django - Models, Views and templates). It has a great &lt;span class="caps"&gt;ORM&lt;/span&gt; that lets you create and control relational databases and their tables using Python classes for Models. Besides that it allows you to query the data using the model instances in a really simple way. It&amp;#8217;s really easy and&amp;nbsp;powerful.&lt;/p&gt;
&lt;p&gt;Not to mention that Django has an extensible admin interface that uses this same model classes to allow &lt;span class="caps"&gt;CRUD&lt;/span&gt; operations and the management of the data in your&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;A simple example of the &lt;span class="caps"&gt;ORM&lt;/span&gt;&amp;nbsp;use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Given a model User you can filter the users by a given name like&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;pygame&lt;/h4&gt;
&lt;p&gt;Pygame is a simple &lt;span class="caps"&gt;SDL&lt;/span&gt; game engine. You need to control basically everything, even the flow of the game loop, but that doesn&amp;#8217;t make it a bad engine, actually that makes you understand in a much deeper level how a game works, the control of printing the images on the screen, the sprites animation and even&amp;nbsp;collision.&lt;/p&gt;
&lt;p&gt;Surely, Pygame lets you use some libraries for physics and 3D (OpenGL) for example. I myself wrote a small library to help control the camera and make it follow an object&amp;nbsp;smoothly.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;d be too long to put pygame code here, but I&amp;#8217;ll leave a link to a github repo containing a game I&amp;nbsp;wrote.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jcemelanda/MathShooter"&gt;Math&amp;nbsp;Shooter&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Powerful standard&amp;nbsp;library&lt;/h3&gt;
&lt;p&gt;You may be asking yourself why should I want to make a language more complex bringing so many functionalities into the standard library if we can have tons of libraries that do those things just a &lt;code&gt;import&lt;/code&gt; command away from&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;The thing is, managing dependencies can get quite complicated and the standard library have a high degree of optimization as most of it is written in C and works with the Python &lt;span class="caps"&gt;VM&lt;/span&gt; in a lower level than most libraries. That makes it faster in many cases and more&amp;nbsp;efficient.&lt;/p&gt;
&lt;p&gt;Some of my favorite libraries in the standard library are &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;itertools&lt;/code&gt;, &lt;code&gt;regex&lt;/code&gt;, &lt;code&gt;statistics&lt;/code&gt;, &lt;code&gt;functools&lt;/code&gt; and &lt;code&gt;pickle&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;The zen of&amp;nbsp;Python&lt;/h3&gt;
&lt;p&gt;If you open a python shell and execute &lt;code&gt;import this&lt;/code&gt; you&amp;#8217;ll see a poem that kind of summarizes the philosophy behind&amp;nbsp;Python.&lt;/p&gt;
&lt;pre&gt;
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
&lt;/pre&gt;

&lt;p&gt;Just read it and you&amp;#8217;ll see how those verses can inspire you to write better&amp;nbsp;code.&lt;/p&gt;
&lt;h3&gt;The Python&amp;nbsp;Community&lt;/h3&gt;
&lt;p&gt;I met the language in 2007 and fell in love with it, but was in 2015, when I went to my first Python conference that I found out Python is not just a technology. It&amp;#8217;s a community of people that love to share knowledge and that try to make the world a better&amp;nbsp;place. &lt;/p&gt;
&lt;p&gt;I met some of the best developers I ever dreamed of meeting like David Beazley and Luciano Ramalho and after the conference we&amp;#8217;d go all together to a bar and talk until very late at&amp;nbsp;night.&lt;/p&gt;
&lt;p&gt;I learned so much and I was able to teach and help to. I got involved with PyLadies and DjangoGirls initiatives and I could inspire people and get inspired by them&amp;nbsp;also.&lt;/p&gt;
&lt;h3&gt;Finally&lt;/h3&gt;
&lt;p&gt;Those are just some brief reasons I have Python as my preferred language and I try to apply it everywhere I find it&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;I hope this can inspire you as much as I got inspired myself all this&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;Happy coding and please tell me what you think in the&amp;nbsp;comments!&lt;/p&gt;</content><category term="Opinion"></category><category term="python"></category><category term="preferences"></category><category term="stack"></category></entry><entry><title>Python, minha linguagem de programação preferida</title><link href="https://jcemelanda.github.io/python-favorite-pt_BR.html" rel="alternate"></link><published>2021-07-31T06:00:00+02:00</published><updated>2021-07-31T06:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-07-31:/python-favorite-pt_BR.html</id><summary type="html">&lt;p&gt;Algumas idéias e pensamentos sobre por que Python é minha linguagem&amp;nbsp;favorita&lt;/p&gt;</summary><content type="html">&lt;p&gt;Provavelmente quem me conhece sabe que gosto de Python, não é realmente algo novo, pois tenho milhares de camisetas de eventos Python que estive em todo o Brasil de 2015 a&amp;nbsp;2019.&lt;/p&gt;
&lt;p&gt;Então, decidi tentar colocar em palavras porque eu gosto tanto desta linguagem e porque é tão importante na minha vida e na minha&amp;nbsp;carreira.&lt;/p&gt;
&lt;h3&gt;Simplicidade&lt;/h3&gt;
&lt;p&gt;Acho que uma das primeiras coisas que vêm à mente de alguém quando pensa em Python é como ele é simples. A sintaxe do Python é tão direta que, muitas vezes, ler o código é como ler em&amp;nbsp;inglês.&lt;/p&gt;
&lt;p&gt;Veja por&amp;nbsp;exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;É&amp;nbsp;lindo.&lt;/p&gt;
&lt;h3&gt;Muitas opções de bibliotecas de&amp;nbsp;terceiros&lt;/h3&gt;
&lt;p&gt;É comum ver piadas que em python você pode fazer o que quiser apenas importando uma&amp;nbsp;biblioteca.&lt;/p&gt;
&lt;p&gt;Certamente não é tão fácil, mas definitivamente você tem um grande número de bibliotecas que já fazem ou ajudam você a fazer quase tudo o que você&amp;nbsp;deseja.&lt;/p&gt;
&lt;p&gt;Algumas das bibliotecas mais incríveis que usei&amp;nbsp;são:&lt;/p&gt;
&lt;h4&gt;requests&lt;/h4&gt;
&lt;p&gt;Uma biblioteca que torna muito fácil e legível chamar URLs usando verbos &lt;span class="caps"&gt;HTTP&lt;/span&gt; regulares como &lt;span class="caps"&gt;GET&lt;/span&gt;, &lt;span class="caps"&gt;POST&lt;/span&gt;, &lt;span class="caps"&gt;PUT&lt;/span&gt;, &lt;span class="caps"&gt;PATCH&lt;/span&gt; e &lt;span class="caps"&gt;DELETE&lt;/span&gt;. Aqui estão alguns exemplos de como&amp;nbsp;usá-la.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;django&lt;/h4&gt;
&lt;p&gt;Django é um framework web completo que permite criar aplicações web com inspiração na arquitetura de aplicação &lt;span class="caps"&gt;MVC&lt;/span&gt; (Model-View-Controller), (&lt;span class="caps"&gt;MVT&lt;/span&gt; em Django - Models, Views e templates). Possui um ótimo &lt;span class="caps"&gt;ORM&lt;/span&gt; que permite criar e controlar bancos de dados relacionais e suas tabelas usando classes Python para modelos. Além disso, permite consultar os dados usando as instâncias do modelo de uma forma muito simples. É muito fácil e&amp;nbsp;poderoso.&lt;/p&gt;
&lt;p&gt;Sem mencionar que o Django tem uma interface de administração extensível que usa essas mesmas classes de modelo para permitir operações &lt;span class="caps"&gt;CRUD&lt;/span&gt; e o gerenciamento dos dados em sua&amp;nbsp;aplicação.&lt;/p&gt;
&lt;p&gt;Um exemplo simples de uso do &lt;span class="caps"&gt;ORM&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Given a model User you can filter the users by a given name like&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;pygame&lt;/h4&gt;
&lt;p&gt;Pygame é uma game engine &lt;span class="caps"&gt;SDL&lt;/span&gt; simples. Você precisa controlar basicamente tudo, até mesmo o fluxo do loop do jogo, mas isso não o torna uma engine ruim, na verdade faz você entender em um nível muito mais profundo como um jogo funciona, o controle de mostrar as imagens na tela , a animação dos sprites e até mesmo a&amp;nbsp;colisão.&lt;/p&gt;
&lt;p&gt;Certamente, Pygame permite que você use algumas bibliotecas para física e 3D (OpenGL), por exemplo. Eu mesmo escrevi uma pequena biblioteca para ajudar a controlar a câmera e fazê-la seguir um objeto&amp;nbsp;suavemente.&lt;/p&gt;
&lt;p&gt;Seria muito longo colocar um exemplo de código do pygame aqui, mas deixarei um link para um repositório github contendo um jogo que&amp;nbsp;escrevi.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jcemelanda/MathShooter"&gt;Math&amp;nbsp;Shooter&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Bibliotecas Padrão&amp;nbsp;Poderosas&lt;/h3&gt;
&lt;p&gt;Você pode estar se perguntando por que eu deveria querer fazer uma linguagem mais complexa trazendo tantas funcionalidades para a biblioteca padrão se podemos ter toneladas de bibliotecas que fazem essas coisas apenas um comando &lt;code&gt;import&lt;/code&gt; longe de&amp;nbsp;você.&lt;/p&gt;
&lt;p&gt;O fato é que gerenciar dependências pode ficar bem complicado e a biblioteca padrão tem um alto grau de otimização, já que a maior parte dela é escrita em C e trabalha com a &lt;span class="caps"&gt;VM&lt;/span&gt; Python em um nível mais baixo do que a maioria das bibliotecas. Isso o torna mais rápido e eficiente em muitos&amp;nbsp;casos.&lt;/p&gt;
&lt;p&gt;Algumas das minhas bibliotecas favoritas na biblioteca padrão são &lt;code&gt;random&lt;/code&gt;,&lt;code&gt;itertools&lt;/code&gt;, &lt;code&gt;regex&lt;/code&gt;,&lt;code&gt;statistics&lt;/code&gt;, &lt;code&gt;functools&lt;/code&gt; e&lt;code&gt;pickle&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;O &amp;#8220;Zen&amp;#8221; do&amp;nbsp;Python&lt;/h3&gt;
&lt;p&gt;Se você abrir um shell python e executar &lt;code&gt;import this&lt;/code&gt;, verá um poema que meio que resume a filosofia por trás do&amp;nbsp;Python.&lt;/p&gt;
&lt;pre&gt;
O Zen do Python, por Tim Peters, tradução livre

Belo é melhor do que feio.
Explícito é melhor do que implícito.
Simples é melhor que complexo.
Complexo é melhor do que complicado.
Plano é melhor do que aninhado.
O esparso é melhor do que o denso.
A legibilidade conta.
Casos especiais não são especiais o suficiente para quebrar as regras.
Embora a praticidade supere a pureza.
Os erros nunca devem passar silenciosamente.
A menos que seja explicitamente silenciado.
Diante da ambigüidade, recuse a tentação de adivinhar.
Deve haver uma - e de preferência apenas uma - maneira óbvia de fazer as coisas.
Embora esse caminho possa não ser óbvio no início, a menos que você seja holandês.
Agora é melhor do que nunca.
Embora nunca seja sempre melhor do que * agora *.
Se a implementação for difícil de explicar, é uma má ideia.
Se a implementação for fácil de explicar, pode ser uma boa ideia.
Os namespaces são uma ótima ideia - vamos fazer mais disso!
&lt;/pre&gt;

&lt;p&gt;Basta lê-lo e você verá como esses versos podem inspirá-lo a escrever um código&amp;nbsp;melhor.&lt;/p&gt;
&lt;h3&gt;A Comunidade&amp;nbsp;Python&lt;/h3&gt;
&lt;p&gt;Conheci a linguagem em 2007 e me apaixonei por ela, mas foi em 2015, quando fui à minha primeira conferência Python, que descobri que Python não é apenas uma tecnologia. É uma comunidade de pessoas que ama compartilhar conhecimento e tenta fazer do mundo um lugar&amp;nbsp;melhor.&lt;/p&gt;
&lt;p&gt;Conheci alguns dos melhores desenvolvedores que já sonhei em conhecer, como David Beazley e Luciano Ramalho e depois da conferência íamos todos juntos a um bar e conversávamos até tarde da&amp;nbsp;noite.&lt;/p&gt;
&lt;p&gt;Eu aprendi muito e pude ensinar e ajudar. Eu me envolvi com as iniciativas PyLadies e DjangoGirls e pude inspirar as pessoas e ser inspirado por elas&amp;nbsp;também.&lt;/p&gt;
&lt;h3&gt;Finalmente&lt;/h3&gt;
&lt;p&gt;Esses são apenas alguns breves motivos pelos quais tenho Python como minha linguagem preferida e tentaro aplicá-lo em todos os lugares que considero&amp;nbsp;útil.&lt;/p&gt;
&lt;p&gt;Espero que isso possa inspirar você tanto quanto eu me inspirei todos esses&amp;nbsp;anos.&lt;/p&gt;
&lt;p&gt;Boa programação e por favor me diga o que você achou nos&amp;nbsp;comentários!&lt;/p&gt;</content><category term="Opinion"></category><category term="python"></category><category term="preferences"></category><category term="stack"></category></entry><entry><title>Hello World</title><link href="https://jcemelanda.github.io/hello-world.html" rel="alternate"></link><published>2021-07-30T00:00:00+02:00</published><updated>2021-07-30T00:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-07-30:/hello-world.html</id><summary type="html">&lt;p&gt;Hello, this is my first post here in this&amp;nbsp;blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s been a really long time since I wrote a blog post and it&amp;#8217;s actually quite harder then I expected to get back to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In this blog you should expect me to talk about technology. Whatever I find relevant in what I&amp;#8217;m studying, as I love to teach, I&amp;#8217;ll post some tutorials&amp;nbsp;also.&lt;/p&gt;
&lt;p&gt;I hope you will enjoy the content and feel free to contact me in the comments&amp;nbsp;:D&lt;/p&gt;</content><category term="General"></category><category term="hello"></category><category term="start"></category></entry><entry><title>Olá Mundo</title><link href="https://jcemelanda.github.io/hello-world-pt_BR.html" rel="alternate"></link><published>2021-07-30T00:00:00+02:00</published><updated>2021-07-30T00:00:00+02:00</updated><author><name>Julio Melanda</name></author><id>tag:jcemelanda.github.io,2021-07-30:/hello-world-pt_BR.html</id><summary type="html">&lt;p&gt;Olá, este é meu primeiro post aqui neste&amp;nbsp;blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Olá!&lt;/p&gt;
&lt;p&gt;Faz muito tempo desde a última vez que  escrevi um post num blog, e está sendo bem mais complicado do que eu esperava para&amp;nbsp;retomar.&lt;/p&gt;
&lt;p&gt;Neste blog, você pode esperar que eu fale de tecnologia. Qualquer coisa que eu ache relevante que eu esteja estudando, como eu adoro ensinar, vou postar tutoriais&amp;nbsp;também.&lt;/p&gt;
&lt;p&gt;Espero que goste do conteúdo e fique à contade para interagir nos comentários&amp;nbsp;:D&lt;/p&gt;</content><category term="General"></category><category term="hello"></category><category term="start"></category></entry></feed>